#!/usr/bin/perl
#
# This script is made for situations where automatic switch to the (S)ATA sleep
# mode does not work, e.g. because some other daemon periodically connects and
# retrieves unrelated information like temperature readings. Most HDD models
# care only about data transfers (ignoring unrelated actions) and go to sleep
# after no data was transfered in a certain period, but some HDDs are disturbed
# by them and therefore never go to sleep mode.
#
# The simple daemon program implemented below just runs in background and
# watches the data statistics of IDE/SCSI/SATA harddisks from Linux kernel
# perspective. When unchanged for a certain period the script will try to
# force the suspend mode using the hdparm utility, and do that exactly one time.
#
# Copyright (c) 2006-2022 Eduard Bloch <blade@debian.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the author nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
# EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

my $statfile="/proc/diskstats";
my $interval=521;
my $debug=$ENV{HDDSDEBUG};
my $dbgout=STDOUT;
my $wakeup_count;

my $kerver=`uname -r`;

# old kernels did strange stuff, disk permanently woke up immediately
#die "EBADSATA\n" if 0==system("dpkg", "--compare-versions", $kerver,
#   "lt", "2.6.30-rc4");

use strict;
sub _start;
sub _idleloop;
sub _getDiskDataPairs;

$interval=$ENV{HDDSUSPINT} if defined($ENV{HDDSUSPINT});

sub _getDiskDataPairs
{
   my %ret;
   die "Could not read $statfile\n" if ! -r $statfile;
   open(st, $statfile);
   while(<st>) 
   {
      if((my $partition, my $drive, my $pfx, my $t,my $data)=(/^\s+\d+\s+\d+\s+(((sd|hd)\w*?[a-z]+)(\d+))\s(.*)/))
      {
              print "$drive, $partition, $t, $data\n" if $debug;
              $ret{$drive}.=$data;
              print "refval($drive) -> $ret{$drive}\n" if $debug;
      }
   }
   close(st);
   return %ret;
}

sub _idleloop
{
   my %seenstat;
   my %suspstat;

   do {

      # suspend-to-ram might confuse us, i.e. no IO happened but disks are up again
      open(st, "</sys/power/wakeup_count") or return;
      my $newWcount = int(<st>);
      undef %seenstat if ($newWcount != $wakeup_count);
      $wakeup_count = $newWcount;

      my %gdp = _getDiskDataPairs;
      foreach my $disk (keys(%gdp))
      {
         my $data=$gdp{$disk};
         syswrite($dbgout, "$disk, $data vs. $seenstat{$disk}\n") if $debug;
         if($seenstat{$disk} eq $data && $suspstat{$disk} ne $data)
         {
            # disk was halted and data stats not changed since then. Still 
            # possible that something woke up the disk in the meantime 
            # without changing the disk stats (like temperature or config 
            # reading by the user) but that's user's problem. Suspending
            # such disks calls for trouble, they might start to wake up and
            # halt short afterwards in a loop when some software does the
            # actions in the background (like an old unpatched version of
            # hddtemp polled by collectd).

            $suspstat{$disk} = $data;
            syswrite($dbgout, "Spinning down: $disk\n") if $debug;
            system "hdparm -y /dev/$disk";
            sleep 17; # or the SATA driver sometimes does weird things and resets the link for no apparent reason, awaking the drive
         }

         $seenstat{$disk}=$data;
      }
   }
   while(sleep $interval);
}

_getDiskDataPairs() if $debug;

_idleloop()

